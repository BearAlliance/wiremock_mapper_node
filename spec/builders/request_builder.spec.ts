import { RequestBuilder } from '../../lib/builders/request_builder'

describe('RequestBuilder', () => {
  describe('isAnyVerb', () => {
    it('should json stringify to { method: "ANY" }', () => {
      const builder = new RequestBuilder();
      builder.isAnyVerb();
      const expectedJSON = JSON.stringify({ method: 'ANY' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isAnyVerb()).toEqual(builder);
    });
  });

  describe('isADelete', () => {
    it('should json stringify to { method: "DELETE" }', () => {
      const builder = new RequestBuilder();
      builder.isADelete();
      const expectedJSON = JSON.stringify({ method: 'DELETE' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isADelete()).toEqual(builder);
    });
  });

  describe('isAGet', () => {
    it('should json stringify to { method: "GET" }', () => {
      const builder = new RequestBuilder();
      builder.isAGet();
      const expectedJSON = JSON.stringify({ method: 'GET' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isAGet()).toEqual(builder);
    });
  });

  describe('isAHead', () => {
    it('should json stringify to { method: "HEAD" }', () => {
      const builder = new RequestBuilder();
      builder.isAHead();
      const expectedJSON = JSON.stringify({ method: 'HEAD' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isAHead()).toEqual(builder);
    });
  });

  describe('isAnOptions', () => {
    it('should json stringify to { method: "Options" }', () => {
      const builder = new RequestBuilder();
      builder.isAnOptions();
      const expectedJSON = JSON.stringify({ method: 'OPTIONS' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isAnOptions()).toEqual(builder);
    });
  });

  describe('isAPost', () => {
    it('should json stringify to { method: "POST" }', () => {
      const builder = new RequestBuilder();
      builder.isAPost();
      const expectedJSON = JSON.stringify({ method: 'POST' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isAPost()).toEqual(builder);
    });
  });

  describe('isAPut', () => {
    it('should json stringify to { method: "PUT" }', () => {
      const builder = new RequestBuilder();
      builder.isAPut();
      const expectedJSON = JSON.stringify({ method: 'PUT' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isAPut()).toEqual(builder);
    });
  });

  describe('isATrace', () => {
    it('should json stringify to { method: "TRACE" }', () => {
      const builder = new RequestBuilder();
      builder.isATrace();
      const expectedJSON = JSON.stringify({ method: 'TRACE' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.isATrace()).toEqual(builder);
    });
  });

  describe('withBasicAuth', () => {
    it('should json stringify to { basicAuth: { username: value, password: value } }', () => {
      const builder = new RequestBuilder();
      builder.withBasicAuth('ike', '1234');
      const expectedJSON = JSON.stringify({ basicAuth: { username: 'ike', password: '1234' } });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });

    it('returns self for chaining', () => {
      const builder = new RequestBuilder();
      expect(builder.withBasicAuth('', '')).toEqual(builder);
    });
  });

  describe('withBody', () => {
    it('should json stringify to { bodyPatterns: [{{ JSON GENERATED BY MATCH BUILDER }}] }', () => {
      const builder = new RequestBuilder();
      builder.withBody().absent();
      const expectedJSON = JSON.stringify({ bodyPatterns: [{ absent: true }] });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });
  });

  describe('withCookie', () => {
    it('should json stringify to { cookies: { key: {{ JSON GENERATED BY MATCH BUILDER }} } }', () => {
      const builder = new RequestBuilder();
      builder.withCookie('ike').absent();
      const expectedJSON = JSON.stringify({ cookies: { ike: { absent: true } } });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });
  });

  describe('withHeader', () => {
    it('should json stringify to { headers: { key: {{ JSON GENERATED BY MATCH BUILDER }} } }', () => {
      const builder = new RequestBuilder();
      builder.withHeader('ike').absent();
      const expectedJSON = JSON.stringify({ headers: { ike: { absent: true } } });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });
  });

  describe('withQueryParam', () => {
    it('should json stringify to { queryParameters: { key: {{ JSON GENERATED BY MATCH BUILDER }} } }', () => {
      const builder = new RequestBuilder();
      builder.withQueryParam('ike').absent();
      const expectedJSON = JSON.stringify({ queryParameters: { ike: { absent: true } } });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });
  });

  describe('withUrl', () => {
    it('should json stringify to {{ JSON GENERATED BY URL MATCH BUILDER }}', () => {
      const builder = new RequestBuilder();
      builder.withUrl().equalTo('ike');
      const expectedJSON = JSON.stringify({ url: 'ike' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });
  });

  describe('withUrlPath', () => {
    it('should json stringify to {{ JSON GENERATED BY URL MATCH BUILDER }}', () => {
      const builder = new RequestBuilder();
      builder.withUrlPath().equalTo('ike');
      const expectedJSON = JSON.stringify({ urlPath: 'ike' });
      expect(JSON.stringify(builder)).toEqual(expectedJSON);
    });
  });
});
